#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Probes the 365Strong results page... which is entirely JS-generated.
# So this tries its best.
#


import datetime
import json
import os
import shutil
import sys
import urllib.request


NUMPAGES = 1 # Number of pages to go back in results, 10 results per page.
FEDDIR = os.path.dirname(os.path.realpath(__file__))

# I'm not sure how static this URL is... it's not clear what generates it.
# This provides the data in JSON format.
FEDURL = "https://static.wixstatic.com/sites/51e939_d3e9035922a2f52d991ac1fa72596013_1001.json.z"


def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def color(s):
    return "\033[1;31m" + s + "\033[0;m"


def getjson(url):
    with urllib.request.urlopen(url) as r:
        s = r.read().decode('ascii')
        return json.loads(s)


def getmeetlist(json):

    # Actually parsing the json is too annoying...
    blob = str(json['data']['document_data'])

    urls = []

    for k in blob.split("'"):
        # Links are PDF or XLS(X).
        if '.xls' in k or '.pdf' in k:
            # Some of the data contains, uh, just names of things.
            # All of the actual meet results seem to have a magic string in them,
            # which I think is probably like the AppID or something.
            if '51e939_' in k:
                urls.append('https://docs.wixstatic.com/%s' % k)

    return urls


def getenteredurls():
    urls = []
    for dirname, subdirs, files in os.walk(FEDDIR):
        if 'URL' in files:
            with open(dirname + os.sep + 'URL', 'r') as fd:
                for k in fd.readlines():
                    urls.append(k.strip())
    return urls


def main():
    meetlist = []

    data = getjson(FEDURL)
    meets = getmeetlist(data)
    meetlist = meetlist + meets

    known = getenteredurls()

    for m in meetlist:
        if not m in known:
            print(color('[365Strong] ') + m)

if __name__ == '__main__':
    main()
