#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for meet.csv files.
# Used as part of "make check".
#
# Makes sure that:
#
# 1) All the column data is in the pre-set format.
#

import oplcsv
import os
import sys

def redden(s):
    return "\033[1;31m" + s + "\033[0;m"

def enyellow(s):
    return "\033[1;33m" + s + "\033[0;m"

globalFilename = ''
havePrintedFilename = False
hitError = False  # Determines return value at end.

def reset_filename_state(filename):
    global globalFilename
    global havePrintedFilename
    globalFilename = filename
    havePrintedFilename = False

def print_filename_once():
    # This completely breaks the main() abstraction, but whatever.
    global havePrintedFilename
    if not havePrintedFilename:
        print(globalFilename, file=sys.stderr)
        havePrintedFilename = True

def perror(s):
    global hitError
    hitError = True
    print_filename_once()
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    print_filename_once()
    print(' ' + enyellow(s), file=sys.stderr)


KnownFederations = [
    "365Strong", # 365 Strong Powerlifting Federation.
    "AAPF", # Amateur APF (drug-tested).
    "APA",
    "APF",
    "AsianPF", # Asian Powerlifting Federation, IPF.
    "BB", # Bogatyr Brotherhood, a stand-alone and short-lived Russian federation.
    "CAPO", # Australian affiliate of the WPC/GPA.
    "CommonwealthPF", # Commonwealth Powerlifting Federation.
    "CPF", # Canadian Powerlifting Federation (USPA/IPL).
    "USPF",
    "USPA",
    "USAPL",
    "CPL", # Canadian Powerlifting League.
    "CPU", # Canadian Powerlifting Union.
    "FESUPO", # Federacion Sudamericana de Powerlifting
    "FPO", # Finland Powerlifting Organization (IPA).
    "GBPF", # British Powerlifting.
    "GPA",
    "GPC",
    "IPA",
    "IPF",
    "IPL",
    "IrishPF", # Irish Powerlifting Federation (IPF affiliate).
    "NAPF", # North American Powerlifting Federation.
    "NASA",
    "NIPF", # Northern Ireland Powerlifting Federation.
    "NSF", # Norwegian branch of the IPF.
    "NZPF", # New Zealand Powerlifting Federation, IPF.
    "OceaniaPF", # Oceania Powerlifting Federation, IPF.
    "SPF",
    "EPF",
    "RPS",
    "RUPC", # Raw Unity.
    "ProRaw",
    "PA",
    "RAW", # 100% RAW Federation (drug-tested).
    "SCT", # Super-Cup of Titans.
    "THSPA", # Texas High School, single-ply only, drug-tested.
    "UPA",
    "WPC",
    "AWPC", # Amateur WPC (drug-tested).
    "WRPF",
    "XPC",
]


def is_number(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


def check(scriptname, filename):
    # Pretty-printer helper (so we only print the name once).
    reset_filename_state(filename)

    csv = oplcsv.Csv(filename)

    fields = ['Federation', 'Date', 'MeetCountry', 'MeetState', 'MeetTown', 'MeetName']
    if len(fields) != len(csv.fieldnames):
        perror("Incorrect number of fields")

    for i in range(0, len(fields)):
        if fields[i] != csv.fieldnames[i]:
            perror("Field %u must be %s" % (i, fields[i]))

    row = csv.rows[0]
    if len(row) != len(fields):
        perror("Meet file has incorrect number of columns")

    for i, text in enumerate(row):
        if text.strip() != text:
            perror("Extraneous whitespace for %s in row %s" % (text, ','.join(row)))

        # 0th entry: Federation
        if i == 0:
            if not text in KnownFederations:
                perror("Unknown federation (add to check-meet-csv?): \"%s\"" % text)

        # 1st entry: Date
        if i == 1:
            if len(text) != 10 or text[4] != '-' or text[7] != '-':
                perror("Date in wrong format: \"%s\"" % text)

        # 2nd, 3rd, and 4th entries: country, state (or whatever), city
        if i == 2 or i == 3 or i == 4:
            found_illegal_char = False
            for c in text:
                if not c.isalpha() and not c in ' -.\'':
                    found_illegal_char = True
                    break

            if found_illegal_char:
                perror("Illegal character in: \"%s\"" % text)

        # 5th entry: Free-form name of competition
        if i == 5:
            found_illegal_char = False
            for c in text:
                if not c.isalnum() and not c in ' -.\'/&':
                    found_illegal_char = True
                    break

            if found_illegal_char:
                perror("Illegal character in: \"%s\"" % text)

            if text.replace('  ',' ') != text:
                pwarning("Excessive spacing in: \"%s\"" % text)
            if text.strip() != text:
                pwarning("Spacing on end: \"%s\"" % text)



if __name__ == '__main__':
    # If arguments are provided, check only those files.
    if len(sys.argv) > 1:
        for f in sys.argv[1:]:
            check(sys.argv[0], f)

    # Otherwise, check every file named meet.csv in the dirtree,
    # which is much faster than using `find -exec`.
    else:
        for dirname, subdirs, files in os.walk(os.getcwd()):
            if 'meet.csv' in files:
                meetpath = dirname + os.sep + 'meet.csv'
                check(sys.argv[0], meetpath)

                if not 'lifters.csv' in files:
                    perror('Missing lifters.csv')

    if hitError:
        sys.exit(1)
